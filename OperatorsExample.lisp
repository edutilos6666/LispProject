(defclass OperatorsExample ()
()
  )


(defmethod test-arithmeticOps ((ex OperatorsExample))
  (defparameter x 10)
  (defparameter y 3)
  (setq add (+ x y))
  (setq sub (- x y))
  (setq mul (* x y))
  (setq div (/ x y))
  (setq remainder (rem x y))
  (setq modulo (mod x y))
  (setq incf-res (incf x y))
  (setq decf-res (decf x y))
  (format t "<<Arithmetic Operators>>~%")
  (format t "x = ~a and y = ~a~%" x y)
  (format t "(+ x y) = ~a~%" add)
  (format t "(- x y) = ~a~%" sub)
  (format t "(* x y) = ~a~%" mul)
  (format t "(/ x y) = ~a~%" div)
  (format t "(rem x y) = ~a~%" remainder)
  (format t "(mod x y) = ~a~%" modulo)
  (format t "(incf x y) = ~a~%" incf-res)
  (format t "(decf x y) = ~a~%" decf-res)
  )


(defmethod test-relationalOps ((ex OperatorsExample))
  (defparameter x 10)
  (defparameter y 3)
  (setq eq (= x y))
  (setq ne (not (= x y)))
  (setq ne2 (/= x y))
  (setq gt (> x y))
  (setq gte (>= x y))
  (setq lt (< x y))
  (setq lte (<= x y))
  (format t "<<Relational Operators>>~%")
  (format t "x = ~a and y = ~a~%" x y)
  (format t "(= x y) = ~a~%" eq)
  (format t "(not (= x y)) = ~a~%" ne)
  (format t "(/= x y) = ~a~%" ne2)
  (format t "(> x y) = ~a~%" gt)
  (format t "(>= x y) = ~a~%" gte)
  (format t "(< x y) = ~a~%" lt)
  (format t "(<= x y) = ~a~%" lte)
  )


(defmethod test-logicalOps ((ex OperatorsExample))
  (defparameter x t)
  (defparameter y nil)
  (setq and-res (and x y))
  (setq or-res (or x y))
  (setq not-x (not x))
  (setq not-y (not y))
  (format t "<<Logical Operators>>~%")
  (format t "x = ~a and y = ~a~%" x y)
  (format t "(and x y) = ~a~%" and-res)
  (format t "(or x y) = ~a~%" or-res)
  (format t "(not x) = ~a~%" not-x)
  (format t "(not y) = ~a~%" not-y)
  )

(defmethod test-bitwiseOps ((ex OperatorsExample))
  (defparameter x 10)
  (defparameter y 23)
  (setq logand-res (logand x y))
  (setq logior-res (logior x y))
  (setq logxor-res (logxor x y))
  (setq lognor-res (lognor x y))
  (setq logeqv-res (logeqv x y))
  (format t "<<Bitwise Operators>>~%")
  (format t "x = ~a and y = ~a~%" x y)
  (format t "(logand x y) = ~a~%" logand-res)
  (format t "(logior x y) = ~a~%" logior-res)
  (format t "(logxor x y) = ~a~%" logxor-res)
  (format t "(lognor x y) = ~a~%" lognor-res)
  (format t "(logeqv x y) = ~a~%" logeqv-res)
  )



(defmethod test-mathFunctions ((ex OperatorsExample))
  (format t "<<Math Functions>>~%")
  (format t "(expt 4 2) = ~d~%" (expt 4 2))
  (format t "(sqrt 81) = ~d~%" (sqrt 81))
  (format t "(exp 1) = ~d~%" (exp 1))
  (format t "(log 1000 10) = ~d~%" (log 1000 10))
  (format t "(eq 'dog 'dog) = ~d~%" (eq 'dog 'dog))
  (format t "(floor 5.5) = ~d~%" (floor 5.5))
  (format t "(ceiling 5.5) = ~d~%" (ceiling 5.5))
  (format t "(max 5 10) = ~d~%" (max 5 10))
  (format t "(min 5 10) = ~d~%" (min 5 10))
  (format t "(oddp 15) = ~d~%" (oddp 15))
  (format t "(evenp 15) = ~d~%" (evenp 15))
  (format t "(numberp 2) = ~d~%" (numberp 2))
  (format t "(null nil) = ~d~%" (null nil))
  (format t "(sin (asin 1)) = ~d~%" (sin (asin 1)))
  (format t "(cos (acos 1)) = ~d~%" (cos (acos 1)))
  (format t "(tan (atan 1)) = ~d~%" (tan (atan 1)))
  (format t "(sinh (asinh 1)) = ~d~%" (sinh (asinh 1)))
  (format t "(cosh (acosh 1)) = ~d~%" (cosh (acosh 1)))
  (format t "(tanh (atanh 0.99)) = ~d~%" (tanh (atanh 0.99)))
  )


(defmethod test-equalityOp ((ex OperatorsExample))
  (format t "<<Equality Operator>>~%")
  (defparameter *name* 'Derek)
  (format t "(eq *name* Derek) = ~d~%" (eq *name* 'Derek))
  (format t "(equal 'car 'truck) = ~d~%" (equal 'car 'truck))
  (format t "(equal 10 10) = ~d~%" (equal 10 10))
  (format t "(equal 5.5 5.3) = ~d~%" (equal 5.5 5.3))
  (format t "(equal \"string\"  \"String\") = ~d~%" (equal "string" "String"))
  (format t "(equal (list 1 2 3) (list 1 2 3)) = ~d~%" (equal (list 1 2 3)
     (list 1 2 3)))
  (format t "(equalp 1.0 1) = ~d~%" (equalp 1.0 1))
  (format t "(equalp Derek derek = ~d~%" (equalp "Derek" "derek"))
  )


(defvar ex (make-instance 'OperatorsExample))
(test-arithmeticOps ex)
(test-relationalOps ex)
(test-logicalOps ex)
(test-bitwiseOps ex)
(test-mathFunctions ex)
(test-equalityOp ex)
